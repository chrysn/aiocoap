credentials-map = { key => entry }

key = uripattern / credential-reference
uripattern = tstr .regexp "[^:]"

entry = credential-reference / credential
credential-reference = tstr .regexp ":.+"

credential = any-of / all-of / dtls / oscore
any-of = { "any" => [+ credential-reference] }
all-of = { "all" => [+ credential-reference] }
dtls = { "dtls" => {
    "client-identity" => compatible-bstr,
    "psk" => compatible-bstr,
}}
oscore = { "oscore" => {
  "contextfile" => tstr,
}}

; This is for serializations like JSON that can't easily express binary
; strings.
compatible = bstr / encoded-ascii / encoded-hex
encoded-ascii = { "ascii": tstr }
encoded-hex = { "hex": tstr } ; Currently accepts hex while stripping out any
                              ; whitespace, dash or colon delimiters


; It would be nice to have this actually used during destructuring in python,
; maybe like this:
;
; @parser.construct('encoded-ascii')
; def encoded_ascii(ascii: str):
;     return ascii.decode('ascii')
