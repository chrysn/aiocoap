; SPDX-FileCopyrightText: Christian AmsÃ¼ss
; SPDX-License-Identifier: MIT

; While using binary strings in several occasions, this format is designed to
; be usable also from JSON and TOML by allowing alternatives to the bstr, and by
; not using numeric keys.
;
; While CDDL places the compatible-bstr items in particular positions, the it
; also takes care to never have any maps where {"ascii" / "hex": tstr} is an
; acceptable value. Consequently, when loading, it is fine to just replace
anything that looks like a compatible-bstr with a bstr.

credentials-map = { * key => entry }

; key = tstr
key = uripattern / credential-reference
uripattern = tstr .regexp "[^:].*"

entry = credential-reference / credential
credential-reference = tstr .regexp ":.*"

credential = any-of / all-of / dtls / oscore / edhoc-oscore
any-of = { "any" => [+ credential-reference] }
all-of = { "all" => [+ credential-reference] }
dtls = { "dtls" => {
    "client-identity" => compatible-bstr,
    "psk" => compatible-bstr,
}}
oscore = { "oscore" => {
  "basedir" => tstr,
}}
edhoc-oscore = { "edhoc-oscore" => {
  "suite" => int,
  "method" => int,
  ? "own_cred_style" => ("by-key-id" / "by-value"),
  ? "peer_cred" => any,
  ? "own_cred" => any,
  ? "private_key_file" => tstr,
  ; Direct inclusion is generally not recommended, but when building an
  ; ephemeral identity, this is convenient.
  ? "private_key" => any,
}}

; This is for serializations like JSON that can't easily express binary
; strings.
compatible-bstr = bstr / encoded-ascii / encoded-hex
encoded-ascii = { "ascii": tstr }
encoded-hex = { "hex": tstr } ; Currently accepts hex while stripping out any
                              ; whitespace, dash or colon delimiters


; It would be nice to have this actually used during destructuring in python,
; maybe like this:
;
; @parser.construct('encoded-ascii')
; def encoded_ascii(ascii: str):
;     return ascii.decode('ascii')
